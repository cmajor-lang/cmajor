//
//     ,ad888ba,                              88
//    d8"'    "8b
//   d8            88,dba,,adba,   ,aPP8A.A8  88     (C)2024 Cmajor Software Ltd
//   Y8,           88    88    88  88     88  88
//    Y8a.   .a8P  88    88    88  88,   ,88  88     https://cmajor.dev
//     '"Y888Y"'   88    88    88  '"8bbP"Y8  88
//                                           ,88
//                                        888P"
//
//  This code may be used under either a GPLv3 or commercial
//  license: see LICENSE.md for more details.


## testFunction()

bool test1()
{
    int32[2] a;
    int32 i = 5;
    a.at(++i) = 1;
    return a.at(i) == 1;
}

bool test2()
{
    int32[2] a;
    int64 i = 5;
    a.at(++i) = 1;
    return a.at(i) == 1;
}

bool test3()
{
    int32<5>[10] a;
    a.at(6).at(3) = 1;
    a.at(7).at(2) = 2;
    a.at(8).at(1) = 3;
    a.at(9).at(0) = 4;
    return a.at(6).at(3)== 1 && a[7].at(2) == 2 && a.at(8)[1] == 3 && a[-1][0] == 4;
}

bool test4()
{
    int32<5>[10] a;
    a[6].at(3) = 1;
    a[7].at(2) = 2;
    a[8].at(1) = 3;
    a[9].at(0) = 4;
    return a.at(6).at(3)== 1 && a[7].at(2) == 2 && a.at(8)[1] == 3 && a[-1][0] == 4;
}

bool test5()
{
    int32<5>[10] a;
    a[6][3] = 1;
    a[7][2] = 2;
    a[8][1] = 3;
    a[9][0] = 4;
    return a.at(6).at(3)== 1 && a[7].at(2) == 2 && a.at(8)[1] == 3 && a[-1][0] == 4;
}

bool test6()
{
    int32<5>[10] a;
    a[6][3] = 1;
    a[7][2] = 2;
    a[8][1] = 3;
    a[9][0] = 4;

    let b = a[6:9];
    return allTrue (b[0] == int<5> (0, 0, 0, 1, 0))
        && allTrue (b[1] == int<5> (0, 0, 2, 0, 0))
        && allTrue (b[2] == int<5> (0, 3, 0, 0, 0));
}

## expectError ("2:38: error: Index is out of range")

void f() { bool[3] v; v[2] = true; v[3] = true; }

## expectError ("2:53: error: Index is out of range")

void f() { bool[3] v; v[-1] = true; v[-3] = true; v[-4] = true; }

## expectError ("2:38: error: Index is out of range")

void f() { bool<3> v; v[2] = true; v[3] = true; }

## expectError ("2:53: error: Index is out of range")

void f() { bool<3> v; v[-1] = true; v[-3] = true; v[-4] = true; }

## expectError ("2:25: error: An array index must be an integer type")

void f() { bool<3> v; v[1.2] = true; }

## expectError ("2:16: error: Illegal array size")

void f() { int[-1] a; }

## expectError ("2:16: error: Array or vector size must be an integer")

void f() { int[2.1] a; }

## expectError ("2:16: error: Array or vector size must be an integer")

void f() { int<3.1> a; }

## expectError ("2:33: error: An array index must be an integer type")

void f()  { int[3] a; let b = a[1.2]; }

## expectError ("2:36: error: An array index must be an integer type")

void f()  { int[3] a; let b = a.at(1.2); }

## expectError ("2:30: error: Index is out of range")

int f() { int[3] a; return a[3]; }

## expectError ("2:33: error: Index is out of range")

int f() { int<5>[3] a; return a[3][0]; }

## expectError ("2:36: error: Index is out of range")

int f() { int<5>[3] a; return a[2][5]; }

## expectError ("2:32: error: An array size must be a constant")

void f() { var i = 0; ++i; int[i] b; }

## expectError ("2:31: error: An array size must be a constant")

void f() { wrap<4> i = 2; int[i] a; }

## expectError ("2:30: error: Type references are not allowed in this context")

void foo() { int[2] a; a.at (int) = 1; }

## expectError ("2:41: error: The 'at' method for this type expects 1 argument(s)")

void f() { float[2] x; let y = x.at (2, 3); }

## expectError ("2:29: error: The 'at' method can only be applied to a vector or array")

void f() { float x; let y = x.at (1); }

## expectError ("6:27: error: The 'at' method can only be applied to a vector or array")

processor P [[ main ]]
{
    input stream int in;
    output stream int out;
    void main() { let v = in.at(2); advance(); }
}

## expectError ("2:38: error: Number of indexes supplied does not match the type: expected 1, but got 2")

void f() { int<3>[3] x; let y = x[0, 0]; }

## expectError ("2:45: error: Expected a vector or array to the left of the bracket operator")

void f() { var f = 1.0f; f += 0.1f; let x = f[0]; }

## expectError ("10:17: error: Expected a vector or array to the left of the bracket operator")

processor P [[ main ]]
{
    output event int out;
    input stream complex in;

    void main()
    {
        out <- 0;
        let x = in[0][1];
        advance();
    }
}

## expectError ("6:24: error: Writing to an endpoint is not allowed inside an expression")

processor P [[ main ]]
{
    input stream int in;
    output stream int out;
    void main() { (out <- in).at(1); advance(); }
}

## expectError ("5:38: error: Index is out of range")

processor P [[ main ]]
{
    output stream int out[2];
    void main() { out[1] <- 123; out[2] <- 123; advance(); }
}

## expectError ("2:27: error: The 'at' method can only be applied to a vector or array")

void f() { int x; let y = x.at(1); }

## testProcessor()

processor P [[main]]
{
    output event int64 out;
    namespace n = N;
    void main() { out <- n::f1 (n::c) <- n::f2 (n::c) <- n::f3 (n::c) <- -1; advance(); }
}

namespace N
{
    const int64[1] c = int64[](1);
    int64 f1 (const int64[1]& a) { return a[0]; }
    int64 f2 (const int64[]& a)  { return a[0]; }
    int64 f3 (const int64[] a)   { return a[0]; }
}

## expectError ("4:57: error: Cannot pass a const value as a non-const reference")

int f1 (const int[]& a) { return a[1]; }
int f2 (int[]& a) { return a[1]; }
void foo() { let a = f1(int[](2, 3, 4)); let b = f2(int[](2, 3, 4)); }

## expectError ("4:64: error: Cannot pass a const value as a non-const reference")

int f1 (const int[]& a) { return a[1]; }
int f2 (int[]& a) { return a[1]; }
void foo() { let a = int[](2, 3, 4); let b = f1(a); let x = f2(a); }

## expectError ("6:15: error: Invalid array slice range")

void f()
{
    let a = int[] (1, 2, 3, 4, 5, 6, 7);
    let b = a[-5:-4];
    let c = a[3:-4];
}

## expectError ("6:17: error: Invalid array slice range")

void f()
{
    let a = int[] (1, 2, 3, 4, 5, 6, 7);
    let b = a[1:2];
    let c = a[1:0];
}

## expectError ("6:15: error: Invalid array slice range")

void f()
{
    let a = int[] (1, 2, 3, 4, 5, 6, 7);
    let b = a[-5:4];
    let c = a[-4:3];
}

## expectError ("2:19: error: Expected a vector or array to the left of the bracket operator")

void f() { int a; a[-1] = (); }

## expectError ("2:48: error: Cannot convert type 'int32[5]' to 'int32[4]'")

void f() { int[5] a = (3); ++a[2]; let b = int[4] (a); }

## expectError ("2:50: error: Cannot convert type 'int32[5]' to 'float32[4]'")

void f() { int[5] a = (3); ++a[2]; let b = float[4] (a); }

## expectError ("2:58: error: Cannot convert type 'int32[5]' to 'int32[4]'")

void f() { int[5] a = (3); ++a[2]; let b = float[4] (int[4] (a)); }

## testProcessor()

processor P [[ main ]]
{
    output event int out;

    int[4] a;
    int[8] b;

    void main()
    {
        a[1:3] = 9;
        b[3:7] = a;
        out <- (allEqual (b[2:], int[] (0, 0, 9, 9, 0, 0)) ? 1 : 0) <- -1;
        advance();
    }
}

## testFunction()

let global = int[7] (1, 2, 3, 4, 5, 6, 7);
int[3] returnSlice()    { return int[] (3, 4, 5); }
int[3] returnSliceOfSlice (int[7] a)   { return a[2:5]; }

bool test_slices1()
{
    let a = int[7] (1, 2, 3, 4, 5, 6, 7);
    let b = a;
    let c = a[:];
    let d = a[0:];
    let e = a[:7];
    let f = a[:a.size];
    let g = a[0:a.size];
    let h = global[:global.size];

    return allEqual (a, b)
        && allEqual (b, c)
        && allEqual (c, d)
        && allEqual (d, e)
        && allEqual (e, f)
        && allEqual (f, g)
        && allEqual (g, h)
        && allEqual (global, a)
        && allEqual (global, e);
}

bool test_slices2()
{
    let a = int[7] (1, 2, 3, 4, 5, 6, 7);
    let b = a[2:5];
    let c = global[2:5];

    return b[1] == 4 && c[1] == 4
        && allEqual (b, int[3] (3, 4, 5))
        && allEqual (c, int[] (3, 4, 5));
}

bool test_slices3()
{
    let a = int[] (1, 2, 3, 4, 5);
    let b = a[2:];
    let c = global[2:][:3];

    return b[1] == 4 && c[1] == 4
        && allEqual (b, int[] (3, 4, 5))
        && allEqual (c, int[3] (3, 4, 5));
}

bool test_slices4()
{
    let a = int[] (3, 4, 5, 6, 7);
    let b = a[:3];
    let c = global[:5][2:];

    return b[1] == 4 && c[1] == 4
        && allEqual (b, int[3] (3, 4, 5))
        && allEqual (c, int[] (3, 4, 5));
}

bool test_slices5()
{
    var a = int[7]();
    a[2:5] = (3, 4, 5);
    let b = a[2:5];
    let c = global[2:-2];

    return b[1] == 4 && c[1] == 4
        && allEqual (b, int[3] (3, 4, 5))
        && allEqual (c, int[] (3, 4, 5));
}

bool test_slices6()
{
    var a = int[7]();
    a[2:5] = returnSlice();
    let b = a[2:5];
    let c = global[2:5];

    return b[1] == 4 && c[1] == 4
        && allEqual (b, returnSlice())
        && allEqual (c, int[] (3, 4, 5))
        && allEqual (returnSlice(), c);
}

bool test_slices7()
{
    var a = int[7]();
    a[2:5] = returnSliceOfSlice (global);
    let b = a[2:-2];
    let c = global[-5:5];

    return b[1] == 4 && c[1] == 4
        && allEqual (b, returnSliceOfSlice (global))
        && allEqual (c, int[] (3, 4, 5))
        && allEqual (returnSliceOfSlice (global), c);
}

bool test_slices8()
{
    var a = global;
    var c = float32[7] (a);
    a[:] = 8;
    var b = a.type();
    let d = float32[7] (global);

    int[6] unused;
    unused[1:3] = 9; // (deliberately not read later)

    return allEqual (a, int[] (8, 8, 8, 8, 8, 8, 8))
        && allEqual (a, int[7] (8))
        && ! allEqual (a, global)
        && allEqual (b, int[7]())
        && allEqual (c, float[] (1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f, 7.0f));
}

bool test_slices9()
{
    int64<1> a;
    a[0] = 345L;
    int64<7> b;
    b[4:] = (3L, 4L, 5);
    var c = int<6> (1, 2, 3, 4, 5, 6);
    c += 0;
    c += 1;
    let d = c[:3];
    let e = c[3:];
    let f = d + e;

    return a[0] == 345L
        && allEqual (b, int64<7> (0, 0, 0, 0, 3L, 4L, 5L))
        && allEqual (b[4:], int64<3> (3L, 4L, 5L))
        && allEqual (d, int<3> (2, 3, 4))
        && allEqual (e, int<3> (5, 6, 7))
        && allEqual (f, int<3> (7, 9, 11));
}

bool test_slices11()
{
    int[54] b, c, d;
    b[2:6] = (2, 3, 4, 5);
    b[50:54] = (123);
    copySwapped (c, b);
    copySwapped (d, c);
    return allEqual (b, d) && ! allEqual (b, c);
}

void copySwapped<T> (T& out, const T& in)
{
    out[0:out.size / 2]       = in[T.size / 2 : T.size];
    out[T.size / 2 : T.size]  = in[:T.size / 2];
}

bool test_slices12()
{
    int[3] array = (1, 2, 3);
    int[] a = array;
    let size1 = a.size;
    a = ();
    let size2 = a.size;
    a = (1, 2);
    return size1 == 3 && size2 == 0 && a.size == 2;
}

int[3] get1()  { return int[] (4, 5, 6); }
int[3] get2()  { return get1(); }
bool test_return1() { return get2()[0] == 4; }
bool test_return2() { return get2()[1] == 5; }
bool test_return3() { return get2()[2] == 6; }

bool test_allEqual2D()
{
    const int[3, 2] x = ((1, 2), (3, 4), (5, 6));
    var y = x;
    bool b1 = allEqual (x, y);
    ++y[1, 1];
    return b1 && ! allEqual (x, y);
}

## testFunction()

int readSliceElement (const int[] x, int index)   { return x.read (index); }
int getSliceElement (const int[] x, int index)   { return x.at(index); }
int getSliceElement0 (const int[] x)   { return x.at (0); }

let x = int[] (1, 2, 3, 4);

bool test0()
{
    return readSliceElement (x, 0) == 1
        && getSliceElement0 (x) == 1
        && readSliceElement (x, 3) == 4
        && readSliceElement (x, 4) == 1;
}

bool test1()
{
    let x = int[] (1, 2, 3, 4);
    return getSliceElement (x, 0) == 1
        && getSliceElement0 (x) == 1
        && getSliceElement (x, 3) == 4
        && getSliceElement (x, 4) == 1;
}

bool test2() { var x = float[](); return x.size == 0; }
bool test3() { let x = float[](); return x.size == 0; }
bool test4() { float[] x; return x.size == 0; }
bool test5() { var x = float[1](); return x.size == 1; }
bool test6() { let x = float[1](); return x.size == 1; }
bool test7() { float[1] x; return x.size == 1; }

bool testSliceCast1()
{
    let s = float<2>[] (float<2> (2.0f, 4.0f));
    return s.size == 1 && s[0][0] == 2.0f && s[0][1] == 4.0f;
}

bool testSliceCast2()
{
    let s = float<2>[1] (float<2> (2.0f, 4.0f));
    return s.size == 1 && s[0][0] == 2.0f && s[0][1] == 4.0f;
}

bool testSliceCast3()
{
    var s = float<2>[] (float<2> (8.0f, 8.0f));
    s[0] = float<2> (2.0f, 4.0f);
    return s.size == 1 && s[0][0] == 2.0f && s[0][1] == 4.0f;
}

bool testSlices1()
{
    int[] a1;
    float[] a2;
    let a3 = a1;
    var a4 = a2;

    return a1.at(1) == 0 && a2.at(2) == 0 && a3.at(3) == 0 && a4.at(3) == 0;
}

bool testAssignToSliceElement()
{
    var x = int[] (1, 2, 3, 4, 5, 6, 7, 8);
    x[2:4][1] = 10;
    x[3:6][1:3][1] = 11;
    x[6:] = int[] (12, 13);
    return x[3] == 10 && x[5] == 11 && x[7] == 13;
}

const float[6] testArray = (0, 1, 2, 3, 4, 5);
const float[] getSlice3() { return testArray; }
bool testReturnSlice2() { return getSlice3()[2] == 2; }

bool testAssignOverlappingSubRegionToSelf1()
{
    var x = int[] (1, 2, 3, 4, 5, 6, 7, 8);
    x[2:5] = x[3:6];
    x[:3] = x[2:5];
    return x[0] == 4 && x[1] == 5 && x[2] == 6;
}

bool testAssignOverlappingSubRegionToSelf2()
{
    var x = int[] (1, 2, 3, 4, 5, 6, 7, 8);
    x[2:5] = x[1:4];
    x[:3] = x[2:5];
    return x[0] == 2 && x[1] == 3 && x[2] == 4;
}

bool testSliceOfArray()
{
    var s = int[] (1, 2, 3, 4);
    int[] s1 = s;
    var s2 = s;
    var a1 = s1, a2 = s2;
    bool ok = a1[1] == 2 && a2[1] == 2;
    s[1]++;
    return ok && a1[1] == 3 && a2[1] == 2;
}

int takeSlice (const int[] x, int n) { return x.at (n); }
int[8] getArray() { return (0, 1, 2, 3, 4, 5, 6, 7); }

bool testSliceOfReturnValue()
{
    let y = takeSlice (getArray()[3:6], 2);
    return y == 5;
}

## testProcessor()

processor test [[ main ]]
{
    output event int results;

    int getSliceElement (int[] x, int index)   { return x.at(index); }
    int getSliceElement0 (int[] x)   { return x.at(0); }
    int[] getChunk()   { return x[2:4]; }

    var x = int[] (1, 2, 3, 4, 5);

    void main() [[do_not_optimise]]
    {
        x[0]++; x[0]--;
        bool b = getSliceElement (x, 0) == 1
                    && getSliceElement0 (x) == 1
                    && getSliceElement (x, 3) == 4
                    && getSliceElement (x, 5) == 1;

        var s = getChunk();
        b = b && s[0] == 3 && s[1] == 4;
        x[2] = 7;
        b = b && s[0] == 7;

        results <- b ? 1 : 0; advance();
        loop { results <- -1; advance(); }
    }
}

## testFunction()

void incrementElement (int[] x, int i, int n)
{
    x[i] = x[i] + n;
}

void incrementElement (int[] x, int i)
{
    x[i]++;
}

void assignElement (int[] x, int i, int n)
{
    x[i] = n;
}

void assignElement2 (int[] x, int i, int n)
{
    x.at (i) = n;
}

bool test1()
{
    int[5] x = (1, 2, 3, 4, 5);
    int[] y = x;

    assignElement (x, 0, 5);
    incrementElement (x, 1, 2);
    incrementElement (x, 2);
    assignElement2 (y, 3, 6);

    return x[0] == 5 && x[1] == 4 && x[2] == 4 && x[3] == 6;
}

## expectError ("3:35: error: Only slices which refer to global data can be returned from functions")

float[6] returnArray() { return (0, 1, 2, 3, 4, 5); }
float[] getSliceOfNope() { return returnArray(); }

## expectError ("3:58: error: Only slices which refer to global data can be returned from functions")

float[6] returnArray() { return (0, 1, 2, 3, 4, 5); }
float[] getSliceOfNope() { var a = returnArray(); return a; }

## expectError ("8:46: error: Values which may contain slices of local data cannot be assigned to variables which may outlive them")

processor P [[ main ]]
{
    output stream int out;

    const float[6] returnArray() { return (0, 1, 2, 3, 4, 5); }
    float[] slice;
    void main() { slice = (1, 2, 3); slice = returnArray(); advance();}
}

## expectError ("6:61: error: Only slices which refer to global data can be returned from functions //// 6:56: note: See context where local data is assigned")

const int[6] data = (1, 2, 3, 4, 5, 6);
int[2] f1() { return data[2:4]; }
int[] f2()  { return data[2:4]; }
int[2] f3() { int[6] data = (1, 2, 3, 4, 5, 6); return data[2:4]; }
int[] f4()  { int[6] data = (1, 2, 3, 4, 5, 6); return data[2:4]; }

## expectError ("4:42: error: Only slices which refer to global data can be returned from functions")

const float[6] data = (1, 2, 3, 4, 5, 6);
float[] f1() { return data[2:]; }
float[] f2() { var x = data[2:3]; return x; }
float[] f3() { return data[:3]; }

## expectError ("4:49: error: Only slices which refer to global data can be returned from functions //// 5:68: note: See context where local data is assigned")

struct X { int[] slice; }
X f1 (const int[] s) { X x; x.slice = s; return x; }
X f2 (const int[] s) { X x; x.slice = s; return x; }
void foo() { f1 (int[](1, 2)); var a = int[](1, 2, 3); let x = f2 (a); }

## expectError ("8:52: error: Values which may contain slices of local data cannot be assigned to variables which may outlive them //// 9:45: note: See context where local data is assigned")

processor P [[ main ]]
{
    output stream int out;

    struct X { int[] slice; }
    X globalX;
    void f (int[] s) { X x; x.slice = s; globalX = x; }
    void foo() { var a = int[] (1, 2, 3); f(a); }
    void main() { advance();}
}

## expectError ("21:14: error: Values which may contain slices of local data cannot be assigned to variables which may outlive them //// 20:17: note: See context where local data is assigned")

processor P [[ main ]]
{
    output stream int out;

    struct S { int[] x; }
    S gs;
    const int[] a = (1, 2, 3, 4);

    void main()
    {
        advance();
        S s = (a);
        gs = s;

        let s2 = S(a);
        gs = s2;

        int[3] y = (1, 2, 3);
        S s3 = (y);
        gs = s3;
    }
}

## expectError ("18:12: error: Only slices which refer to global data can be returned from functions //// 17:11: note: See context where local data is assigned")

struct S { int[] x; }

const int[] a = (1, 2, 3);

S f1()
{
    S s;
    s.x = a;
    return s;
}

S f2()
{
    var a = int[] (1, 2, 3);
    S s;
    s.x = a;
    return s;
}

## expectError ("22:12: error: Only slices which refer to global data can be returned from functions //// 20:11: note: See context where local data is assigned")

struct S { int[] x; }
struct S2 { S[2] y; }

let a = int[](1, 2, 3);

S2 f1()
{
    S s;
    s.x = a;
    let s2 = S2 ((s, s));
    return s2;
}

S2 f2()
{
    var b = int[] (1, 2, 3);
    S s;
    s.x = a;
    s.x = b;
    let s2 = S2 ((s, s));
    return s2;
}

## expectError ("16:12: error: Only slices which refer to global data can be returned from functions //// 23:24: note: See context where local data is assigned")

struct S { int[] x; }
let a = int[](1, 2, 3);

S f1 (bool b, const int[] y)
{
    S s = (b ? y : a);
    let s2 = s;
    return s2;
}

S f2 (bool b, const int[] y)
{
    S s = (b ? y : a);
    let s2 = s;
    return s2;
}

void foo()
{
    let x1 = f1 (true, a);
    var b = int[](1, 2, 3);
    let x2 = f2 (true, b);
}

## expectError ("5:12: error: Only slices which refer to global data can be returned from functions //// 8:75: note: See context where local data is assigned")

int[] f (const int[] y)
{
    let x = y;
    return x;
}

void foo() { var x = f (int[] (1, 2, 3)); var a = int[](3, 4); var y = f (a); }

## expectError ("9:14: error: Values which may contain slices of local data cannot be assigned to variables which may outlive them")

void f()
{
    int[] s1;

    {
        var data = int[3] (1, 2, 3);
        int[] s2 = data;
        s1 = data;
        var a = s2[1];
    }

    var b = s1[1];
}

## expectError ("12:19: error: Values which may contain slices of local data cannot be assigned to variables which may outlive them //// 12:21: note: See context where local data is assigned //// 12:29: note: See context where local data is assigned")

bool f2() { return true; }

void f()
{
    int[] s1;

    {
        var data1 = int[3] (1, 2, 3), data2 = int[3] (1, 2, 3);
        int[] s2 = f2() ? data1 : data2;
        var s3 = f2() ? data1 : data2;
        s1 = f2() ? data1 : data2;
        var a = s2[1];
    }

    var b = s1[1];
}

## expectError ("24:13: error: Only slices which refer to global data can be returned from functions //// 23:13: note: See context where local data is assigned")

struct S { int[] x; }

struct T
{
    S s;
    int i;
}

const int[] a = (1, 2, 3);

S f1()
{
    T t;
    t.s.x = a;
    return t.s;
}

S f2()
{
    var a = int[] (1, 2, 3);
    T t;
    t.s.x = a;
    return t.s;
}

## expectError ("12:10: error: Values which may contain slices of local data cannot be assigned to variables which may outlive them")

let global = int[] (2, 3);
int[] f3 (const int[] x) { return x; }
int[] f2()               { return f3 (global); }

void f()
{
    int[] s1;
    var data = int[3] (1, 2, 3);
    int[] s2 = data;
    s1 = f2();
    s1 = data;
    var a = s2[1], b = s1[1];
}

## expectError ("10:17: error: Values which may contain slices of local data cannot be assigned to variables which may outlive them //// 10:24: note: See context where local data is assigned")

processor P [[main]]
{
    output stream int out;
    int[] x;

    void main()
    {
        var b = 2; ++b;
        x = int[] (int[8] (1, 2, 3, 4, 5, 6, b, 8));
        advance();
    }
}

## testFunction()

struct S { int[] x; }
const int[] a = (1, 2, 3);

S f1()
{
    let s = S(a);
    let t = s;
    return t;
}

bool test() { return f1().x[2] == 3; }

S f2 (S s)     { return s; }
bool test2() { var s = S(a); return f2 (s).x[2] == 3; }

struct S2
{
    S s;
    void set (S ss) { this.s = ss; }
}

bool test3() { S s = (a); S2 s2; s2.set (s); return s2.s.x[1] == 2; }
bool test4() { let a = int[](1, 2, 3); S s = (a); S2 s2; s2.set (s); return s2.s.x[1] == 2; }

## disabled expectError()

processor P [[ main ]]
{
    output event int results;
    external float[] data [[ sinewave, rate: 1000, frequency: 10, numFrames: 1000 ]];

    struct S { float[] x; }
    void f (S s) { s.x[1] = 1; }

    void main()
    {
        f(S(data));
        advance();
    }
}

## expectError ("10:9: error: Expected an assignable target on the left of the '=' operator")

processor P [[ main ]]
{
    output event int results;
    external float[] data [[ sinewave, rate: 1000, frequency: 10, numFrames: 1000 ]];

    void main()
    {
        float[] a = (1, 2);
        data = a;
        advance();
    }
}

## testConsole ("2 2 2 456 0 0 2 4")

processor test
{
    output stream int out;

    void main()
    {
        int[4] originalArray = (1, 2, 3, 4);

        int[4] arrayCopy  = originalArray; // creates a copy of the original
        int[]  arraySlice = originalArray; // creates a slice of the original

        console <- arrayCopy[1]  <- " "    // prints 2
                <- arraySlice[1] <- " ";   // prints 2

        originalArray[1] = 456; // modifying the original array

        console <- arrayCopy[1]  <- " "    // prings 2
                <- arraySlice[1] <- " ";   // prints 456

        arraySlice = (); // sets the slice to be empty

        console <- arraySlice.size <- " "   // prints 0
                <- arraySlice[1]   <- " ";  // prints 0

        arraySlice = originalArray[2:4]; // now make our slice point at the last two elements

        console <- arraySlice.size <- " " // prints 2
                <- arraySlice[1];         // prints 4

        advance();
    }
}

## testConsole ("1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 ")

processor test
{
    output stream float out;

    void main()
    {
        int b = 7; ++b;
        let slice1 = int[] (int[8] (1, 2, 3, 4, 5, 6, 7, b));
        let slice2 = int[] (int[8] (1, 2, 3, 4, 5, 6, 7, 8));

        for (int i = 0; i < slice1.size; i++)
        {
            console <- slice1[i] <- " " <- slice2[i] <- " ";
            loop (32) advance();
        }
    }
}

## testConsole ("1 2 3 4 5 6 7 8 ")

processor test
{
    output stream float out;

    void main()
    {
        int b = 7; ++b;
        let slice = int[] (int[8] (1, 2, 3, 4, 5, 6, 7, b));

        for (int i = 0; i < slice.size; i++)
        {
            console <- slice[i] <- " ";
            loop (32) advance();
        }
    }
}

## testConsole ("1 2 3 4 5 6 7 8 ")

processor test
{
    output stream float out;

    void main()
    {
        let slice = int[] (int[8] (1, 2, 3, 4, 5, 6, 7, 8));

        for (int i = 0; i < slice.size; i++)
        {
            console <- slice[i] <- " ";
            loop (32) advance();
        }
    }
}

## testConsole ("1 2 3 4 5 6 7 8 ")

processor test
{
    output stream float out;

    void write (int[8] values)
    {
        for (int i = 0; i < values.size; i++)
        {
            console <- values.at (i) <- " ";
            loop (100) advance();
        }
    }

    void main()
    {
        write (int[8] (1, 2, 3, 4, 5, 6, 7, 8));
    }
}

## testConsole ("1 2 3 4 5 6 7 8 ")

processor test
{
    output stream float out;

    void write (const int[] values)
    {
        for (int i = 0; i < values.size; i++)
            console <- values[i] <- " ";
    }

    void main()
    {
        write (int[8] (1, 2, 3, 4, 5, 6, 7, 8));
        advance();
    }
}

## testConsole ("1 2 3 4 5 6 7 8 ")

processor test
{
    output stream float out;

    void main()
    {
        let values = int[8] (1, 2, 3, 4, 5, 6, 7, 8);
        let slice = int[] (values);

        for (int i = 0; i < slice.size; i++)
        {
            console <- slice[i] <- " ";
            loop (32) advance();
        }
    }
}

## testConsole ("1 2 3 4 5 6 7 8 ")

processor test
{
    output stream float out;

    void main()
    {
        var values = int[8] (0, 2, 3, 4, 5, 6, 7, 8);
        values[0] = 1;
        let slice = int[] (values);

        for (int i = 0; i < slice.size; i++)
        {
            console <- slice[i] <- " ";
            loop (32) advance();
        }
    }
}

## testConsole ("1 2 3 4 5 6 7 8 ")

processor test
{
    output stream float out;

    void main()
    {
        let values = int[8] (1, 0, 0, 0, 0, 0, 0, 0);
        let values2 = int[8] (0, 2, 3, 4, 5, 6, 7, 8);

        var slice = int[] (values);

        for (int i = 0; i < slice.size; i++)
        {
            console <- slice[i] <- " ";
            loop (32) advance();
            slice = values2;
        }
    }
}

## testConsole ("1 2 3 4 5 6 7 8 ")

processor test
{
    output stream float out;

    void main()
    {
        let values = int[8] (0, 1, 0, 0, 0, 0, 0, 0);
        let values2 = int[8] (1, 2, 3, 4, 5, 6, 7, 8);

        var slice = int[] (values);
        slice = values2;

        for (int i = 0; i < slice.size; i++)
        {
            console <- slice[i] <- " ";
            loop (32) advance();
        }
    }
}

## testConsole ("1 2 3 4 5 6 7 8 ")

processor test
{
    output stream float out;

    int[8] get() { return (1, 2, 3, 4, 5, 6, 7, 8); }

    void write (const int[] values)
    {
        for (int i = 0; i < values.size; i++)
            console <- values[i] <- " ";
    }

    void main()
    {
        let x = int[] (get());
        int[4] y;
        y[2]++;
        write (x);
        advance();
    }
}

## testConsole ("1 2 3 4 5 6 7 8 ")

processor test
{
    output stream float out;

    int[8] get() { return (1, 2, 3, 4, 5, 6, 7, 8); }

    void write (const int[] values)
    {
        for (int i = 0; i < values.size; i++)
            console <- values[i] <- " ";
    }

    void main()
    {
        write (get());
        advance();
    }
}

## testConsole ("1 2 3 4 5 6 7 8 ")

processor test
{
    output stream float out;

    void write (const int[]& values)
    {
        for (int i = 0; i < values.size; i++)
            console <- values[i] <- " ";
    }

    void main()
    {
        write (int[8] (1, 2, 3, 4, 5, 6, 7, 8));
        advance();
    }
}

## testConsole ("0123456789")

processor Test
{
    output stream float out;

    void main()
    {
        for (wrap<10> i)
        {
            advance();
            console <- i;
        }
    }
}

## testConsole ("0123456789")

processor Test
{
    output stream float out;

    void main()
    {
        for (wrap<10> i)
        {
            console <- i;
            advance();
        }
    }
}

## testConsole ("0123456789")

processor Test
{
    output stream float out;

    void main()
    {
        for (int i = 0; i < 10; i++)
        {
            advance();
            console <- int (i);
        }
    }
}

## testConsole ("0123456789")

processor Test
{
    output stream float out;

    void main()
    {
        for (int i = 0; i < 10; i++)
        {
            console <- i;
            advance();
        }
    }
}

## testFunction()

bool test()
{
    float<8> v = (1, 2, 3, 4, 5, 6, 7, 8);
    blankRange (v);
    return allTrue (v == float<8> (1, 2, 3, 0, 0, 0, 0, 8));
}

void blankRange (float<8>& frame)
{
    blankSome (frame[3:7]);
}

void blankSome (float<4>& frame)
{
    frame = 0;
}

## testFunction()

bool test()
{
    float[8] v = (1, 2, 3, 4, 5, 6, 7, 8);
    float[8] e = (1, 2, 3, 0, 0, 0, 0, 8);

    blankRange (v);

    bool matching = true;

    for (wrap<8> i)
        matching &&= (v[i] == e[i]);

    return matching;
}

void blankRange (float[8]& frame)
{
    blankSome (frame[3:7]);
}

void blankSome (float[4]& frame)
{
    frame = 0;
}

## testFunction()

int[3] r (int[3] x) { x[0] *= 10; x[2] *= 10; return x; }

bool test1()
{
    var v = int[2,3] ((1, 2, 3), (4, 5, 6));
    v[0] = r(v[0]);
    return allEqual (v[0], int[3] (10, 2, 30));
}

bool test2()
{
    var v = int[2,3] ((1, 2, 3), (4, 5, 6));
    v[1] = r(v[1]);
    return allEqual (v[1], int[3] (40, 5, 60));
}

int[3] get (int& n) { return int[3] (1, 2, 3 + n++); }

bool test3()
{
    int n = 0;
    int[6] f;
    f[0:3] = get (n);
    return allEqual (f, int[6] (1, 2, 3, 0, 0, 0));
}

## testFunction()

void updateSlice (int[] s, int i, int v)
{
    s[i] = v;
}

void updateSliceOfSlice (int[] s, int i, int v)
{
    updateSlice (s[1:], i, v);
}

bool testUpdateSlice()
{
    var a = int[4] (0, 0, 0, 0);

    updateSlice (a, 0, 10);
    updateSlice (a, 1, 20);

    return a[0] == 10
        && a[1] == 20
        && a[2] == 0
        && a[3] == 0;
}

bool testUpdateSliceOfSlice()
{
    var a = int[4] (0, 0, 0, 0);

    updateSliceOfSlice (a, 0, 10);
    updateSliceOfSlice (a, 1, 20);

    return a[0] == 0
        && a[1] == 10
        && a[2] == 20
        && a[3] == 0;
}

bool testUpdateSliceOutOfBounds()
{
    var a = int[4] (0, 0, 0, 0);

    updateSlice (a, 3, 10);
    updateSlice (a, 4, 20);

    return a[0] == 20
        && a[1] == 0
        && a[2] == 0
        && a[3] == 10;
}

bool testUpdateEmptySlice()
{
    var a = int[1] (0);

    updateSliceOfSlice (a, 0, 10);

    return a[0] == 0;
}

int getSliceElement (const int[] s, int i)
{
    return s[i];
}

int getSliceOfSliceElement (int [] s, int i)
{
    return getSliceElement (s[1:], i);
}

bool testGetSliceElement()
{
    var a = int[4] (0, 1, 2, 3);

    return getSliceElement (a, 0) == 0
        && getSliceElement (a, 1) == 1
        && getSliceElement (a, 2) == 2
        && getSliceElement (a, 3) == 3;
}

bool testGetSliceOfSliceElement()
{
    var a = int[4] (0, 1, 2, 3);

    return getSliceOfSliceElement (a, 0) == 1
        && getSliceOfSliceElement (a, 1) == 2
        && getSliceOfSliceElement (a, 2) == 3
        && getSliceOfSliceElement (a, 3) == 1;
}

## expectError ("11:18: error: Cannot pass a const value as a mutable slice")

void updateSlice (int[] s, int i, int v)
{
    s[i] = v;
}

void updateConstSlice()
{
    let a = int[4] (0, 0, 0, 0);

    updateSlice (a, 0, 10);
}

## expectError ("17:5: error: No suitable override found for function call: updateSlice(const int32[], int32, int32)")

void updateSlice (int[] s, int i, int v)
{
    s[i] = v;
}

struct S
{
    const int[] s;
}

void updateConstSlice()
{
    let a = int[4] (0, 0, 0, 0);
    var s = S (a);

    updateSlice (s.s, 0, 10);
}

## testCompile()

processor Test [[ main ]]
{
    output stream float out;

    float[100] v;

    float get (const wrap<100> i)
    {
        return v[i];
    }

    void main()
    {
        wrap<10> i;
        out <- get (i);

        advance();
    }
}