//
//     ,ad888ba,                              88
//    d8"'    "8b
//   d8            88,dba,,adba,   ,aPP8A.A8  88     The Cmajor Standard Library
//   Y8,           88    88    88  88     88  88
//    Y8a.   .a8P  88    88    88  88,   ,88  88     (C)2024 Cmajor Software Ltd
//     '"Y888Y"'   88    88    88  '"8bbP"Y8  88     https://cmajor.dev
//                                           ,88
//                                        888P"
//
//  The Cmajor standard library may be used under the terms of the ISC license:
//
//  Permission to use, copy, modify, and/or distribute this software for any purpose with or
//  without fee is hereby granted, provided that the above copyright notice and this permission
//  notice appear in all copies. THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
//  WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
//  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR
//  CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
//  WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
//  CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

/**
    std.midi

    Various utilities for handling raw MIDI data.
*/

/**
    The classes in the standard library which deal with synthesisers have been designed
    to avoid raw MIDI messages, and instead to work with strongly-typed event objects
    for note-ons/offs, pitch-bends, etc, which are vastly more usable than a 3-byte
    code that was designed for a 1980s serial link.
*/
namespace std::midi
{
    /// Holds a short (3-byte) MIDI message.
    struct Message
    {
        /// This contains 3 packed bytes, arranged as (byte2 | (byte1 << 8) | (byte0 << 16)).
        /// This layout means that when you view the value in hex in your debugger, it reads in
        /// the natural order for a MIDI message.
        int32 message;

        int32 getByte1() const                              { return (this.message >> 16) & 0xff; }
        int32 getByte2() const                              { return (this.message >> 8) & 0xff; }
        int32 getByte3() const                              { return this.message & 0xff; }

        int32 getMessageType() const                        { return (this.message >> 16) & 0xf0; }
        int32 getChannel0to15() const                       { return (this.message >> 16) & 0x0f; }
        int32 getChannel1to16() const                       { return this.getChannel0to15() + 1; }
        int32 get14BitValue() const                         { return ((this.message >> 8) & 0x7f) | ((this.message & 0x7f) << 7); }

        bool isNoteOn() const                               { return (this.message & 0xf00000) == 0x900000 && (this.message & 0xff) != 0; }
        bool isNoteOff() const                              { return (this.message & 0xf00000) == 0x800000 || (this.message & 0xf000ff) == 0x900000; }
        int32 getNoteNumber() const                         { return (this.message >> 8) & 0x7f; }
        float32 getPitch() const                            { return float32 (this.getNoteNumber()); }
        int32 getVelocity() const                           { return this.message & 0x7f; }
        float32 getFloatVelocity() const                    { return float32 (this.message & 0x7f) * (1.0f / 127.0f); }

        bool isProgramChange() const                        { return (this.message & 0xf00000) == 0xc00000; }
        int32 getProgramChangeNumber() const                { return (this.message >> 8) & 0x7f; }

        bool isPitchWheel() const                           { return (this.message & 0xf00000) == 0xe00000; }
        int32 getPitchWheelValue() const                    { return this.get14BitValue(); }

        bool isAftertouch() const                           { return (this.message & 0xf00000) == 0xa00000; }
        int32 getAfterTouchValue() const                    { return this.message & 0x7f; }

        bool isChannelPressure() const                      { return (this.message & 0xf00000) == 0xd00000; }
        int32 getChannelPressureValue() const               { return (this.message >> 8) & 0x7f; }
        float32 getFloatChannelPressureValue() const        { return float32 ((this.message >> 8) & 0x7f) * (1.0f / 127.0f); }

        bool isController() const                           { return (this.message & 0xf00000) == 0xb00000; }
        bool isControllerNumber (int32 number) const        { return (this.message & 0xf0ff00) == (0xb00000 | (number << 8)); }
        int32 getControllerNumber() const                   { return (this.message >> 8) & 0x7f; }
        int32 getControllerValue() const                    { return this.message & 0x7f; }
        float32 getFloatControllerValue() const             { return float32 (this.message & 0x7f) * (1.0f / 127.0f); }
        bool isAllNotesOff() const                          { return this.isControllerNumber (123); }
        bool isAllSoundOff() const                          { return this.isControllerNumber (120); }

        bool isQuarterFrame() const                         { return (this.message >> 16) == 0xf1; }
        bool isClock() const                                { return (this.message >> 16) == 0xf8; }
        bool isStart() const                                { return (this.message >> 16) == 0xfa; }
        bool isContinue() const                             { return (this.message >> 16) == 0xfb; }
        bool isStop() const                                 { return (this.message >> 16) == 0xfc; }
        bool isActiveSense() const                          { return (this.message >> 16) == 0xfe; }
        bool isMetaEvent() const                            { return (this.message >> 16) == 0xff; }

        bool isSongPositionPointer() const                  { return (this.message >> 16) == 0xf2; }
        int32 getSongPositionPointerValue() const           { return this.get14BitValue(); }
    }

    /// standard MPE range of 48 semitones
    let semitoneBendRange = 48.0f;

    /// MPE slide controller number
    let slideController = 74;

    //==============================================================================
    /// Creates a short MIDI message object from the raw bytes
    Message createMessage (int byte1, int byte2, int byte3)
    {
        std::midi::Message m;
        m.message = ((byte1 & 0xff) << 16) + ((byte2 & 0x7f) << 8) + (byte3 & 0x7f);
        return m;
    }

    /// Clamps and converts a 0-1 float value to a MIDI byte 0-127
    int clampFloatToByte (float value)
    {
        return int (clamp (value, 0.0f, 1.0f) * 127.0f);
    }

    //==============================================================================
    /// Accepts an input stream of raw MIDI MPE events and converts them to a stream
    /// of note event objects which can be more easily used by synthesiser classes.
    processor MPEConverter
    {
        input event Message parseMIDI;

        output event (std::notes::NoteOn,
                      std::notes::NoteOff,
                      std::notes::PitchBend,
                      std::notes::Slide,
                      std::notes::Pressure,
                      std::notes::Control) eventOut;

        event parseMIDI (Message message)
        {
            if (message.isNoteOn())
            {
                eventOut <- std::notes::NoteOn (message.getChannel0to15(),
                                                message.getPitch(),
                                                message.getFloatVelocity());
            }
            else if (message.isNoteOff())
            {
                eventOut <- std::notes::NoteOff (message.getChannel0to15(),
                                                 message.getPitch(),
                                                 message.getFloatVelocity());
            }
            else if (message.isPitchWheel())
            {
                eventOut <- std::notes::PitchBend (message.getChannel0to15(),
                                                   (semitoneBendRange / 8192.0f) * float32 (message.get14BitValue() - 8192));
            }
            else if (message.isChannelPressure())
            {
                eventOut <- notes::Pressure (message.getChannel0to15(),
                                             message.getFloatChannelPressureValue());
            }
            else if (message.isController())
            {
                if (message.getControllerNumber() == slideController)
                    eventOut <- notes::Slide (message.getChannel0to15(),
                                              message.getFloatControllerValue());
                else
                    eventOut <- std::notes::Control (message.getChannel0to15(),
                                                     message.getControllerNumber(),
                                                     message.getFloatControllerValue());
            }
        }
    }

    //==============================================================================
    /// Accepts an input of note events, and converts them to a stream of short
    /// midi messages.
    processor NoteToMIDI
    {
        input event (std::notes::NoteOn,
                     std::notes::NoteOff,
                     std::notes::PitchBend,
                     std::notes::Slide,
                     std::notes::Pressure,
                     std::notes::Control) eventIn;

        output event std::midi::Message midiOut;

        event eventIn (std::notes::NoteOn e)
        {
            midiOut <- createMessage (0x90 + (e.channel & 0xf), int (e.pitch), clampFloatToByte (e.velocity));
        }

        event eventIn (std::notes::NoteOff e)
        {
            midiOut <- createMessage (0x80 + (e.channel & 0xf), int (e.pitch), clampFloatToByte (e.velocity));
        }

        event eventIn (std::notes::PitchBend e)
        {
            let clampedValue = clamp (e.bendSemitones, -semitoneBendRange, semitoneBendRange);
            let value = int (8192.0f + (clampedValue * (8191.0f / semitoneBendRange)));
            midiOut <- createMessage (0xe0 + (e.channel & 0xf), value, value >> 7);
        }

        event eventIn (std::notes::Pressure e)
        {
            midiOut <- createMessage (0xd0 + (e.channel & 0xf), clampFloatToByte (e.pressure), 0);
        }

        event eventIn (std::notes::Slide e)
        {
            midiOut <- createMessage (0xb0 + (e.channel & 0xf), slideController, clampFloatToByte (e.slide));
        }

        event eventIn (std::notes::Control e)
        {
            midiOut <- createMessage (0xb0 + (e.channel & 0xf), e.control, clampFloatToByte (e.value));
        }
    }
}
